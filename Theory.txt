Node.js -
  Cross platform, javascript runtime environment

NPM - Node Package Manager
   
    CLI utility to install and uninstall packages from the 
    command line.
    install , uninstall or manage dependencies

    yarn is an alternative to npm


graphQL-
     altern to RestAPI 
     This project will use APOLLO GraphQL server - kind of Framework or server for hosting our schemas and queries and mutations.
     QUERY - When we want to get some data from the server it is called as a QUERY
     MUTATIONS / mutation request - When we want to send (change) some data to the server

Prisma ORM(Object Relation management)-
            is a layer which hepls us make queries to our database
            making queries and read and write into our database.
            models - Tables in a database

PostgreSql-
        powerful relational database system.  

Supabase-
       for hosting and managing cloud Postgresql database

Next.js-
       For frontend
       framework for react(Library for wen and native UI).

Tailwind Css and shadcn-
       For styling
      tailwind- library for css (for utility classes).
      shadcn - library for utilizing various components in our project.

typescript-
      To code frontend and backend.
       to maintain code quality and typesafe code.

AWS-
    For hosting and deployment of the project.

----------- Initialize and setup the frontend -------- 
Installations:
node.js : https://nodejs.org/en
npm
yarn : npm install --global yarn


1. Initialize an empty next.js typescript project
2. adding Tailwind css to it.



           -------- tweeple-client :  Yarn setup ------

npm install --global yarn
yarn create next-app .      //asking yarn create a new next app for me in the present working directory

yarn dev           // to start a development sserver on the frontend 
                   // - basically start a server on localhost3000
                   // creates a next.js landing page on the screen


.tsx  - typescript xml

React icons-
   for logos and the icons use the libraray -react icons.
   //In terminal type this to add react icons 
   yarn add react-icons
    and then yarn dev again



----------- Initialize and setup the Backend -------- 

cd ./tweeple-server
yarn init 
yarn add typescript -D               //dev dependencies
tsc --init
yarn add express                //not a dev dependency
// typescript Configuration - Setup an empty typescript project
npx tsc --init  

created src folder- whatever typescript project we have will go into this src folder and we'll compile it.
setting up root and out directory in tsconfig.json file

outDir - the directory we want to keep our code after compiling 

yarn add tsc-watch -D

yarn add graphql

    "dev": "tsc-watch --onSuccess \"npm run build && npm start\""

watches the src directory and after build commands successful execution , it starts the project


https://www.apollographql.com/docs/apollo-server

yarn add @apollo/server graphql


Installing Prisma 
    npm install prisma --save-dev
    yarn add prisma @prisma/client
    npx prisma init --datasource-provider postgresql

create supabase project 
        https://supabase.com

npx prisma migrate dev --name added_user_model    
   
  - whenever you update th schema.prisma file just run this command to migrate the parcticular 
    schema to the database      

Authentication
https://www.npmjs.com/package/@react-oauth/google

yarn add @react-oauth/google  


JWT.IO
    the token generated through google signin is short lived so we will send the token generated
    i.e credential generated when we click on our account for signin, to our server and our server in turn will ask 
    google about the information of the user through the credential generated., and if token is valid we'll 
    be checking if the user with that particular email id exists(as we check in jwt.io we get the info about the user)
    if not we'll create a user and the token, & if user already exists then we'll just create the token.

yarn add axios
        axios is a library for making api calls.    